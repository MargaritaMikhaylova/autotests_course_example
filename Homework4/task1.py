# Напишите функцию which_triangle(a, b, c),
# На вход поступают длины трёх сторон треугольника: a, b, c
# Программа выводит какой это треугольник type_triangle: "Равносторонний", "Равнобедренный", "Обычный".
# Либо "Не треугольник", если по переданным параметрам невозможно построить треугольник
# Например 1, 1, 1 --> "Равносторонний"

def which_triangle(a, b, c):
    '''
    Функция выводит какой это треугольник type_triangle: "Равносторонний", "Равнобедренный", "Обычный".
    Либо "Не треугольник", если по переданным параметрам невозможно построить треугольник
    :param a: 1 сторона
    :param b: 2 сторона
    :param c: 3 сторона
    :return: Тип треугольника
    '''
    is_it_triangle = [a, b, c]
    is_it_triangle.sort()
    if (a <= 0 or b <= 0 or c <= 0) or (is_it_triangle[0] + is_it_triangle[1] <= is_it_triangle[2]):
        type_triangle = "Не треугольник"
    else:
        if a == b == c:
            type_triangle = "Равносторонний"
        else:
            if a == b or a == c or b == c:
                type_triangle = "Равнобедренный"
            else:
                type_triangle = "Обычный"
    return type_triangle

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    (3, 3, 3),
    (1, 2, 2),
    (3, 4, 5),
    (3, 2, 3),
    (1, 2, 3)
]

test_data = [
    "Равносторонний", "Равнобедренный", "Обычный", "Равнобедренный", "Не треугольник"
]


for i, d in enumerate(data):
    assert which_triangle(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
